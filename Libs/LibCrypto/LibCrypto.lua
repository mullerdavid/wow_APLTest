--#region X25519

--[[
MIT License

Copyright (c) 2023 BernhardZat

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

X25519 elliptic-curve Diffie-Hellman key agreement implemented in pure Lua 5.1.
Based on the original TweetNaCl library written in C. See https://tweetnacl.cr.yp.to/
Lua 5.1 doesn't have a 64 bit signed integer type and no bitwise operations.
This implementation emulates bitwise operations arithmetically on 64 bit double precision floating point numbers.
Note that double precision floating point numbers are only exact in the integer range of [-2^53, 2^53].
This works for our purposes because values will not be outside the range of about [-2^43, 2^44].
]]--

if true then
    local carry = function(out)
        for i = 0, 15 do
            out[i] = out[i] + 0x10000;
            local c = out[i] / 0x10000 - (out[i] / 0x10000) % 1;
            if i < 15 then
                out[i + 1] = out[i + 1] + c - 1;
            else
                out[0] = out[0] + 38 * (c - 1);
            end
            out[i] = out[i] - c * 0x10000;
        end
    end

    local swap = function(a, b, bit)
        for i = 0, 15 do
            a[i], b[i] =
                a[i] * ((bit - 1) % 2) + b[i] * bit,
                b[i] * ((bit - 1) % 2) + a[i] * bit;
        end
    end

    local unpack = function(out, a)
        for i = 0, 15 do
            out[i] = a[2 * i] + a[2 * i + 1] * 0x100;
        end
        out[15] = out[15] % 0x8000;
    end

    local pack = function(out, a)
        local t, m = {}, {};
        for i = 0, 15 do
            t[i] = a[i];
        end
        carry(t);
        carry(t);
        carry(t);
        local prime = { [0] = 0xffed, [15] = 0x7fff };
        for i = 1, 14 do
            prime[i] = 0xffff;
        end
        for _ = 0, 1 do
            m[0] = t[0] - prime[0];
            for i = 1, 15 do
                m[i] = t[i] - prime[i] - ((m[i - 1] / 0x10000 - (m[i - 1] / 0x10000) % 1) % 2);
                m[i - 1] = (m[i - 1] + 0x10000) % 0x10000;
            end
            local c = (m[15] / 0x10000 - (m[15] / 0x10000) % 1) % 2;
            swap(t, m, 1 - c);
        end
        for i = 0, 15 do
            out[2 * i] = t[i] % 0x100;
            out[2 * i + 1] = t[i] / 0x100 - (t[i] / 0x100) % 1;
        end
    end

    local add = function(out, a, b)
        for i = 0, 15 do
            out[i] = a[i] + b[i];
        end
    end

    local sub = function(out, a, b)
        for i = 0, 15 do
            out[i] = a[i] - b[i];
        end
    end

    local mul = function(out, a, b)
        local prod = {};
        for i = 0, 31 do
            prod[i] = 0;
        end
        for i = 0, 15 do
            for j = 0, 15 do
                prod[i + j] = prod[i + j] + a[i] * b[j];
            end
        end
        for i = 0, 14 do
            prod[i] = prod[i] + 38 * prod[i + 16];
        end
        for i = 0, 15 do
            out[i] = prod[i];
        end
        carry(out);
        carry(out);
    end

    local inv = function(out, a)
        local c = {};
        for i = 0, 15 do
            c[i] = a[i];
        end
        for i = 253, 0, -1 do
            mul(c, c, c);
            if i ~= 2 and i ~= 4 then
                mul(c, c, a);
            end
        end
        for i = 0, 15 do
            out[i] = c[i];
        end
    end

    local scalarmult = function(out, scalar, point)
        local a, b, c, d, e, f, x, clam = {}, {}, {}, {}, {}, {}, {}, {};
        unpack(x, point);
        for i = 0, 15 do
            a[i], b[i], c[i], d[i] = 0, x[i], 0, 0;
        end
        a[0], d[0] = 1, 1;
        for i = 0, 30 do
            clam[i] = scalar[i];
        end
        clam[0] = clam[0] - (clam[0] % 8);
        clam[31] = scalar[31] % 64 + 64;
        for i = 254, 0, -1 do
            local bit = (clam[i / 8 - (i / 8) % 1] / 2 ^ (i % 8) - (clam[i / 8 - (i / 8) % 1] / 2 ^ (i % 8)) % 1) % 2;
            swap(a, b, bit);
            swap(c, d, bit);
            add(e, a, c);
            sub(a, a, c);
            add(c, b, d);
            sub(b, b, d);
            mul(d, e, e);
            mul(f, a, a);
            mul(a, c, a);
            mul(c, b, e);
            add(e, a, c);
            sub(a, a, c);
            mul(b, a, a);
            sub(c, d, f);
            mul(a, c, { [0] = 0xdb41, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 });
            add(a, a, d);
            mul(c, c, a);
            mul(a, d, f);
            mul(d, b, x);
            mul(b, e, e);
            swap(a, b, bit);
            swap(c, d, bit);
        end
        inv(c, c);
        mul(a, a, c);
        pack(out, a);
    end

    local generate_keypair = function(rng)
        rng = rng or function() return math.random(0, 0xFF) end;
        local sk, pk = {}, {};
        for i = 0, 31 do
            sk[i] = rng();
        end
        local base = { [0] = 9 };
        for i = 1, 31 do
            base[i] = 0;
        end
        scalarmult(pk, sk, base);
        return sk, pk;
    end

    local get_shared_key = function(sk, pk)
        local shared = {};
        scalarmult(shared, sk, pk);
        return shared;
    end

    _G.X25519 = {
        generate_keypair = generate_keypair,
        get_shared_key = get_shared_key,
    }
end

--#endregion

--#region base64

-- Copyright (c) 2023 BernhardZat  -- see above

local base64 = {}

local extract = _G.bit32 and _G.bit32.extract -- Lua 5.2/Lua 5.3 in compatibility mode
if not extract then
	if _G.bit then -- LuaJIT
		local shl, shr, band = _G.bit.lshift, _G.bit.rshift, _G.bit.band
		extract = function( v, from, width )
			return band( shr( v, from ), shl( 1, width ) - 1 )
		end
	elseif _G._VERSION == "Lua 5.1" then
		extract = function( v, from, width )
			local w = 0
			local flag = 2^from
			for i = 0, width-1 do
				local flag2 = flag + flag
				if v % flag2 >= flag then
					w = w + 2^i
				end
				flag = flag2
			end
			return w
		end
	else -- Lua 5.3+
		extract = load[[return function( v, from, width )
			return ( v >> from ) & ((1 << width) - 1)
		end]]()
	end
end


function base64.makeencoder( s62, s63, spad )
	local encoder = {}
	for b64code, char in pairs{[0]='A','B','C','D','E','F','G','H','I','J',
		'K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y',
		'Z','a','b','c','d','e','f','g','h','i','j','k','l','m','n',
		'o','p','q','r','s','t','u','v','w','x','y','z','0','1','2',
		'3','4','5','6','7','8','9',s62 or '+',s63 or'/',spad or'='} do
		encoder[b64code] = char:byte()
	end
	return encoder
end

function base64.makedecoder( s62, s63, spad )
	local decoder = {}
	for b64code, charcode in pairs( base64.makeencoder( s62, s63, spad )) do
		decoder[charcode] = b64code
	end
	return decoder
end

local DEFAULT_ENCODER = base64.makeencoder()
local DEFAULT_DECODER = base64.makedecoder()

local char, concat = string.char, table.concat

function base64.encode( str, encoder, usecaching )
	encoder = encoder or DEFAULT_ENCODER
	local t, k, n = {}, 1, #str
	local lastn = n % 3
	local cache = {}
	for i = 1, n-lastn, 3 do
		local a, b, c = str:byte( i, i+2 )
		local v = a*0x10000 + b*0x100 + c
		local s
		if usecaching then
			s = cache[v]
			if not s then
				s = char(encoder[extract(v,18,6)], encoder[extract(v,12,6)], encoder[extract(v,6,6)], encoder[extract(v,0,6)])
				cache[v] = s
			end
		else
			s = char(encoder[extract(v,18,6)], encoder[extract(v,12,6)], encoder[extract(v,6,6)], encoder[extract(v,0,6)])
		end
		t[k] = s
		k = k + 1
	end
	if lastn == 2 then
		local a, b = str:byte( n-1, n )
		local v = a*0x10000 + b*0x100
		t[k] = char(encoder[extract(v,18,6)], encoder[extract(v,12,6)], encoder[extract(v,6,6)], encoder[64])
	elseif lastn == 1 then
		local v = str:byte( n )*0x10000
		t[k] = char(encoder[extract(v,18,6)], encoder[extract(v,12,6)], encoder[64], encoder[64])
	end
	return concat( t )
end

function base64.decode( b64, decoder, usecaching )
	decoder = decoder or DEFAULT_DECODER
	local pattern = '[^%w%+%/%=]'
	if decoder then
		local s62, s63
		for charcode, b64code in pairs( decoder ) do
			if b64code == 62 then s62 = charcode
			elseif b64code == 63 then s63 = charcode
			end
		end
		pattern = ('[^%%w%%%s%%%s%%=]'):format( char(s62), char(s63) )
	end
	b64 = b64:gsub( pattern, '' )
	local cache = usecaching and {}
	local t, k = {}, 1
	local n = #b64
	local padding = b64:sub(-2) == '==' and 2 or b64:sub(-1) == '=' and 1 or 0
	for i = 1, padding > 0 and n-4 or n, 4 do
		local a, b, c, d = b64:byte( i, i+3 )
		local s
		if usecaching then
			local v0 = a*0x1000000 + b*0x10000 + c*0x100 + d
			s = cache[v0]
			if not s then
				local v = decoder[a]*0x40000 + decoder[b]*0x1000 + decoder[c]*0x40 + decoder[d]
				s = char( extract(v,16,8), extract(v,8,8), extract(v,0,8))
				cache[v0] = s
			end
		else
			local v = decoder[a]*0x40000 + decoder[b]*0x1000 + decoder[c]*0x40 + decoder[d]
			s = char( extract(v,16,8), extract(v,8,8), extract(v,0,8))
		end
		t[k] = s
		k = k + 1
	end
	if padding == 1 then
		local a, b, c = b64:byte( n-3, n-1 )
		local v = decoder[a]*0x40000 + decoder[b]*0x1000 + decoder[c]*0x40
		t[k] = char( extract(v,16,8), extract(v,8,8))
	elseif padding == 2 then
		local a, b = b64:byte( n-3, n-2 )
		local v = decoder[a]*0x40000 + decoder[b]*0x1000
		t[k] = char( extract(v,16,8))
	end
	return concat( t )
end

_G.Base64 = base64

--#endregion

--#region AES

--[[
	Copyright 2019 Tyler Richard Hoyer

	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

		http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
]]

if true then

    local GF8x2 = {
    [0]=0x00,0x02,0x04,0x06,0x08,0x0a,0x0c,0x0e,0x10,0x12,0x14,0x16,0x18,0x1a,0x1c,0x1e,
        0x20,0x22,0x24,0x26,0x28,0x2a,0x2c,0x2e,0x30,0x32,0x34,0x36,0x38,0x3a,0x3c,0x3e,
        0x40,0x42,0x44,0x46,0x48,0x4a,0x4c,0x4e,0x50,0x52,0x54,0x56,0x58,0x5a,0x5c,0x5e,
        0x60,0x62,0x64,0x66,0x68,0x6a,0x6c,0x6e,0x70,0x72,0x74,0x76,0x78,0x7a,0x7c,0x7e,
        0x80,0x82,0x84,0x86,0x88,0x8a,0x8c,0x8e,0x90,0x92,0x94,0x96,0x98,0x9a,0x9c,0x9e,
        0xa0,0xa2,0xa4,0xa6,0xa8,0xaa,0xac,0xae,0xb0,0xb2,0xb4,0xb6,0xb8,0xba,0xbc,0xbe,
        0xc0,0xc2,0xc4,0xc6,0xc8,0xca,0xcc,0xce,0xd0,0xd2,0xd4,0xd6,0xd8,0xda,0xdc,0xde,
        0xe0,0xe2,0xe4,0xe6,0xe8,0xea,0xec,0xee,0xf0,0xf2,0xf4,0xf6,0xf8,0xfa,0xfc,0xfe,
        0x1b,0x19,0x1f,0x1d,0x13,0x11,0x17,0x15,0x0b,0x09,0x0f,0x0d,0x03,0x01,0x07,0x05,
        0x3b,0x39,0x3f,0x3d,0x33,0x31,0x37,0x35,0x2b,0x29,0x2f,0x2d,0x23,0x21,0x27,0x25,
        0x5b,0x59,0x5f,0x5d,0x53,0x51,0x57,0x55,0x4b,0x49,0x4f,0x4d,0x43,0x41,0x47,0x45,
        0x7b,0x79,0x7f,0x7d,0x73,0x71,0x77,0x75,0x6b,0x69,0x6f,0x6d,0x63,0x61,0x67,0x65,
        0x9b,0x99,0x9f,0x9d,0x93,0x91,0x97,0x95,0x8b,0x89,0x8f,0x8d,0x83,0x81,0x87,0x85,
        0xbb,0xb9,0xbf,0xbd,0xb3,0xb1,0xb7,0xb5,0xab,0xa9,0xaf,0xad,0xa3,0xa1,0xa7,0xa5,
        0xdb,0xd9,0xdf,0xdd,0xd3,0xd1,0xd7,0xd5,0xcb,0xc9,0xcf,0xcd,0xc3,0xc1,0xc7,0xc5,
        0xfb,0xf9,0xff,0xfd,0xf3,0xf1,0xf7,0xf5,0xeb,0xe9,0xef,0xed,0xe3,0xe1,0xe7,0xe5
    }
    
    local GF8x3 = {
    [0]=0x00,0x03,0x06,0x05,0x0c,0x0f,0x0a,0x09,0x18,0x1b,0x1e,0x1d,0x14,0x17,0x12,0x11,
        0x30,0x33,0x36,0x35,0x3c,0x3f,0x3a,0x39,0x28,0x2b,0x2e,0x2d,0x24,0x27,0x22,0x21,
        0x60,0x63,0x66,0x65,0x6c,0x6f,0x6a,0x69,0x78,0x7b,0x7e,0x7d,0x74,0x77,0x72,0x71,
        0x50,0x53,0x56,0x55,0x5c,0x5f,0x5a,0x59,0x48,0x4b,0x4e,0x4d,0x44,0x47,0x42,0x41,
        0xc0,0xc3,0xc6,0xc5,0xcc,0xcf,0xca,0xc9,0xd8,0xdb,0xde,0xdd,0xd4,0xd7,0xd2,0xd1,
        0xf0,0xf3,0xf6,0xf5,0xfc,0xff,0xfa,0xf9,0xe8,0xeb,0xee,0xed,0xe4,0xe7,0xe2,0xe1,
        0xa0,0xa3,0xa6,0xa5,0xac,0xaf,0xaa,0xa9,0xb8,0xbb,0xbe,0xbd,0xb4,0xb7,0xb2,0xb1,
        0x90,0x93,0x96,0x95,0x9c,0x9f,0x9a,0x99,0x88,0x8b,0x8e,0x8d,0x84,0x87,0x82,0x81,
        0x9b,0x98,0x9d,0x9e,0x97,0x94,0x91,0x92,0x83,0x80,0x85,0x86,0x8f,0x8c,0x89,0x8a,
        0xab,0xa8,0xad,0xae,0xa7,0xa4,0xa1,0xa2,0xb3,0xb0,0xb5,0xb6,0xbf,0xbc,0xb9,0xba,
        0xfb,0xf8,0xfd,0xfe,0xf7,0xf4,0xf1,0xf2,0xe3,0xe0,0xe5,0xe6,0xef,0xec,0xe9,0xea,
        0xcb,0xc8,0xcd,0xce,0xc7,0xc4,0xc1,0xc2,0xd3,0xd0,0xd5,0xd6,0xdf,0xdc,0xd9,0xda,
        0x5b,0x58,0x5d,0x5e,0x57,0x54,0x51,0x52,0x43,0x40,0x45,0x46,0x4f,0x4c,0x49,0x4a,
        0x6b,0x68,0x6d,0x6e,0x67,0x64,0x61,0x62,0x73,0x70,0x75,0x76,0x7f,0x7c,0x79,0x7a,
        0x3b,0x38,0x3d,0x3e,0x37,0x34,0x31,0x32,0x23,0x20,0x25,0x26,0x2f,0x2c,0x29,0x2a,
        0x0b,0x08,0x0d,0x0e,0x07,0x04,0x01,0x02,0x13,0x10,0x15,0x16,0x1f,0x1c,0x19,0x1a
    }
    
    local GF8x9 = {
    [0]=0x00,0x09,0x12,0x1b,0x24,0x2d,0x36,0x3f,0x48,0x41,0x5a,0x53,0x6c,0x65,0x7e,0x77,
        0x90,0x99,0x82,0x8b,0xb4,0xbd,0xa6,0xaf,0xd8,0xd1,0xca,0xc3,0xfc,0xf5,0xee,0xe7,
        0x3b,0x32,0x29,0x20,0x1f,0x16,0x0d,0x04,0x73,0x7a,0x61,0x68,0x57,0x5e,0x45,0x4c,
        0xab,0xa2,0xb9,0xb0,0x8f,0x86,0x9d,0x94,0xe3,0xea,0xf1,0xf8,0xc7,0xce,0xd5,0xdc,
        0x76,0x7f,0x64,0x6d,0x52,0x5b,0x40,0x49,0x3e,0x37,0x2c,0x25,0x1a,0x13,0x08,0x01,
        0xe6,0xef,0xf4,0xfd,0xc2,0xcb,0xd0,0xd9,0xae,0xa7,0xbc,0xb5,0x8a,0x83,0x98,0x91,
        0x4d,0x44,0x5f,0x56,0x69,0x60,0x7b,0x72,0x05,0x0c,0x17,0x1e,0x21,0x28,0x33,0x3a,
        0xdd,0xd4,0xcf,0xc6,0xf9,0xf0,0xeb,0xe2,0x95,0x9c,0x87,0x8e,0xb1,0xb8,0xa3,0xaa,
        0xec,0xe5,0xfe,0xf7,0xc8,0xc1,0xda,0xd3,0xa4,0xad,0xb6,0xbf,0x80,0x89,0x92,0x9b,
        0x7c,0x75,0x6e,0x67,0x58,0x51,0x4a,0x43,0x34,0x3d,0x26,0x2f,0x10,0x19,0x02,0x0b,
        0xd7,0xde,0xc5,0xcc,0xf3,0xfa,0xe1,0xe8,0x9f,0x96,0x8d,0x84,0xbb,0xb2,0xa9,0xa0,
        0x47,0x4e,0x55,0x5c,0x63,0x6a,0x71,0x78,0x0f,0x06,0x1d,0x14,0x2b,0x22,0x39,0x30,
        0x9a,0x93,0x88,0x81,0xbe,0xb7,0xac,0xa5,0xd2,0xdb,0xc0,0xc9,0xf6,0xff,0xe4,0xed,
        0x0a,0x03,0x18,0x11,0x2e,0x27,0x3c,0x35,0x42,0x4b,0x50,0x59,0x66,0x6f,0x74,0x7d,
        0xa1,0xa8,0xb3,0xba,0x85,0x8c,0x97,0x9e,0xe9,0xe0,0xfb,0xf2,0xcd,0xc4,0xdf,0xd6,
        0x31,0x38,0x23,0x2a,0x15,0x1c,0x07,0x0e,0x79,0x70,0x6b,0x62,0x5d,0x54,0x4f,0x46
    }
    
    local GF8x11 = {
    [0]=0x00,0x0b,0x16,0x1d,0x2c,0x27,0x3a,0x31,0x58,0x53,0x4e,0x45,0x74,0x7f,0x62,0x69,
        0xb0,0xbb,0xa6,0xad,0x9c,0x97,0x8a,0x81,0xe8,0xe3,0xfe,0xf5,0xc4,0xcf,0xd2,0xd9,
        0x7b,0x70,0x6d,0x66,0x57,0x5c,0x41,0x4a,0x23,0x28,0x35,0x3e,0x0f,0x04,0x19,0x12,
        0xcb,0xc0,0xdd,0xd6,0xe7,0xec,0xf1,0xfa,0x93,0x98,0x85,0x8e,0xbf,0xb4,0xa9,0xa2,
        0xf6,0xfd,0xe0,0xeb,0xda,0xd1,0xcc,0xc7,0xae,0xa5,0xb8,0xb3,0x82,0x89,0x94,0x9f,
        0x46,0x4d,0x50,0x5b,0x6a,0x61,0x7c,0x77,0x1e,0x15,0x08,0x03,0x32,0x39,0x24,0x2f,
        0x8d,0x86,0x9b,0x90,0xa1,0xaa,0xb7,0xbc,0xd5,0xde,0xc3,0xc8,0xf9,0xf2,0xef,0xe4,
        0x3d,0x36,0x2b,0x20,0x11,0x1a,0x07,0x0c,0x65,0x6e,0x73,0x78,0x49,0x42,0x5f,0x54,
        0xf7,0xfc,0xe1,0xea,0xdb,0xd0,0xcd,0xc6,0xaf,0xa4,0xb9,0xb2,0x83,0x88,0x95,0x9e,
        0x47,0x4c,0x51,0x5a,0x6b,0x60,0x7d,0x76,0x1f,0x14,0x09,0x02,0x33,0x38,0x25,0x2e,
        0x8c,0x87,0x9a,0x91,0xa0,0xab,0xb6,0xbd,0xd4,0xdf,0xc2,0xc9,0xf8,0xf3,0xee,0xe5,
        0x3c,0x37,0x2a,0x21,0x10,0x1b,0x06,0x0d,0x64,0x6f,0x72,0x79,0x48,0x43,0x5e,0x55,
        0x01,0x0a,0x17,0x1c,0x2d,0x26,0x3b,0x30,0x59,0x52,0x4f,0x44,0x75,0x7e,0x63,0x68,
        0xb1,0xba,0xa7,0xac,0x9d,0x96,0x8b,0x80,0xe9,0xe2,0xff,0xf4,0xc5,0xce,0xd3,0xd8,
        0x7a,0x71,0x6c,0x67,0x56,0x5d,0x40,0x4b,0x22,0x29,0x34,0x3f,0x0e,0x05,0x18,0x13,
        0xca,0xc1,0xdc,0xd7,0xe6,0xed,0xf0,0xfb,0x92,0x99,0x84,0x8f,0xbe,0xb5,0xa8,0xa3
    }
    
    local GF8x13 = {
    [0]=0x00,0x0d,0x1a,0x17,0x34,0x39,0x2e,0x23,0x68,0x65,0x72,0x7f,0x5c,0x51,0x46,0x4b,
        0xd0,0xdd,0xca,0xc7,0xe4,0xe9,0xfe,0xf3,0xb8,0xb5,0xa2,0xaf,0x8c,0x81,0x96,0x9b,
        0xbb,0xb6,0xa1,0xac,0x8f,0x82,0x95,0x98,0xd3,0xde,0xc9,0xc4,0xe7,0xea,0xfd,0xf0,
        0x6b,0x66,0x71,0x7c,0x5f,0x52,0x45,0x48,0x03,0x0e,0x19,0x14,0x37,0x3a,0x2d,0x20,
        0x6d,0x60,0x77,0x7a,0x59,0x54,0x43,0x4e,0x05,0x08,0x1f,0x12,0x31,0x3c,0x2b,0x26,
        0xbd,0xb0,0xa7,0xaa,0x89,0x84,0x93,0x9e,0xd5,0xd8,0xcf,0xc2,0xe1,0xec,0xfb,0xf6,
        0xd6,0xdb,0xcc,0xc1,0xe2,0xef,0xf8,0xf5,0xbe,0xb3,0xa4,0xa9,0x8a,0x87,0x90,0x9d,
        0x06,0x0b,0x1c,0x11,0x32,0x3f,0x28,0x25,0x6e,0x63,0x74,0x79,0x5a,0x57,0x40,0x4d,
        0xda,0xd7,0xc0,0xcd,0xee,0xe3,0xf4,0xf9,0xb2,0xbf,0xa8,0xa5,0x86,0x8b,0x9c,0x91,
        0x0a,0x07,0x10,0x1d,0x3e,0x33,0x24,0x29,0x62,0x6f,0x78,0x75,0x56,0x5b,0x4c,0x41,
        0x61,0x6c,0x7b,0x76,0x55,0x58,0x4f,0x42,0x09,0x04,0x13,0x1e,0x3d,0x30,0x27,0x2a,
        0xb1,0xbc,0xab,0xa6,0x85,0x88,0x9f,0x92,0xd9,0xd4,0xc3,0xce,0xed,0xe0,0xf7,0xfa,
        0xb7,0xba,0xad,0xa0,0x83,0x8e,0x99,0x94,0xdf,0xd2,0xc5,0xc8,0xeb,0xe6,0xf1,0xfc,
        0x67,0x6a,0x7d,0x70,0x53,0x5e,0x49,0x44,0x0f,0x02,0x15,0x18,0x3b,0x36,0x21,0x2c,
        0x0c,0x01,0x16,0x1b,0x38,0x35,0x22,0x2f,0x64,0x69,0x7e,0x73,0x50,0x5d,0x4a,0x47,
        0xdc,0xd1,0xc6,0xcb,0xe8,0xe5,0xf2,0xff,0xb4,0xb9,0xae,0xa3,0x80,0x8d,0x9a,0x97
    }
    
    local GF8x14 = {
    [0]=0x00,0x0e,0x1c,0x12,0x38,0x36,0x24,0x2a,0x70,0x7e,0x6c,0x62,0x48,0x46,0x54,0x5a,
        0xe0,0xee,0xfc,0xf2,0xd8,0xd6,0xc4,0xca,0x90,0x9e,0x8c,0x82,0xa8,0xa6,0xb4,0xba,
        0xdb,0xd5,0xc7,0xc9,0xe3,0xed,0xff,0xf1,0xab,0xa5,0xb7,0xb9,0x93,0x9d,0x8f,0x81,
        0x3b,0x35,0x27,0x29,0x03,0x0d,0x1f,0x11,0x4b,0x45,0x57,0x59,0x73,0x7d,0x6f,0x61,
        0xad,0xa3,0xb1,0xbf,0x95,0x9b,0x89,0x87,0xdd,0xd3,0xc1,0xcf,0xe5,0xeb,0xf9,0xf7,
        0x4d,0x43,0x51,0x5f,0x75,0x7b,0x69,0x67,0x3d,0x33,0x21,0x2f,0x05,0x0b,0x19,0x17,
        0x76,0x78,0x6a,0x64,0x4e,0x40,0x52,0x5c,0x06,0x08,0x1a,0x14,0x3e,0x30,0x22,0x2c,
        0x96,0x98,0x8a,0x84,0xae,0xa0,0xb2,0xbc,0xe6,0xe8,0xfa,0xf4,0xde,0xd0,0xc2,0xcc,
        0x41,0x4f,0x5d,0x53,0x79,0x77,0x65,0x6b,0x31,0x3f,0x2d,0x23,0x09,0x07,0x15,0x1b,
        0xa1,0xaf,0xbd,0xb3,0x99,0x97,0x85,0x8b,0xd1,0xdf,0xcd,0xc3,0xe9,0xe7,0xf5,0xfb,
        0x9a,0x94,0x86,0x88,0xa2,0xac,0xbe,0xb0,0xea,0xe4,0xf6,0xf8,0xd2,0xdc,0xce,0xc0,
        0x7a,0x74,0x66,0x68,0x42,0x4c,0x5e,0x50,0x0a,0x04,0x16,0x18,0x32,0x3c,0x2e,0x20,
        0xec,0xe2,0xf0,0xfe,0xd4,0xda,0xc8,0xc6,0x9c,0x92,0x80,0x8e,0xa4,0xaa,0xb8,0xb6,
        0x0c,0x02,0x10,0x1e,0x34,0x3a,0x28,0x26,0x7c,0x72,0x60,0x6e,0x44,0x4a,0x58,0x56,
        0x37,0x39,0x2b,0x25,0x0f,0x01,0x13,0x1d,0x47,0x49,0x5b,0x55,0x7f,0x71,0x63,0x6d,
        0xd7,0xd9,0xcb,0xc5,0xef,0xe1,0xf3,0xfd,0xa7,0xa9,0xbb,0xb5,0x9f,0x91,0x83,0x8d
    }
    
    local s = {
    [0]=0x63,0x7C,0x77,0x7B,0xF2,0x6B,0x6F,0xC5,0x30,0x01,0x67,0x2B,0xFE,0xD7,0xAB,0x76,
        0xCA,0x82,0xC9,0x7D,0xFA,0x59,0x47,0xF0,0xAD,0xD4,0xA2,0xAF,0x9C,0xA4,0x72,0xC0,
        0xB7,0xFD,0x93,0x26,0x36,0x3F,0xF7,0xCC,0x34,0xA5,0xE5,0xF1,0x71,0xD8,0x31,0x15,
        0x04,0xC7,0x23,0xC3,0x18,0x96,0x05,0x9A,0x07,0x12,0x80,0xE2,0xEB,0x27,0xB2,0x75,
        0x09,0x83,0x2C,0x1A,0x1B,0x6E,0x5A,0xA0,0x52,0x3B,0xD6,0xB3,0x29,0xE3,0x2F,0x84,
        0x53,0xD1,0x00,0xED,0x20,0xFC,0xB1,0x5B,0x6A,0xCB,0xBE,0x39,0x4A,0x4C,0x58,0xCF,
        0xD0,0xEF,0xAA,0xFB,0x43,0x4D,0x33,0x85,0x45,0xF9,0x02,0x7F,0x50,0x3C,0x9F,0xA8,
        0x51,0xA3,0x40,0x8F,0x92,0x9D,0x38,0xF5,0xBC,0xB6,0xDA,0x21,0x10,0xFF,0xF3,0xD2,
        0xCD,0x0C,0x13,0xEC,0x5F,0x97,0x44,0x17,0xC4,0xA7,0x7E,0x3D,0x64,0x5D,0x19,0x73,
        0x60,0x81,0x4F,0xDC,0x22,0x2A,0x90,0x88,0x46,0xEE,0xB8,0x14,0xDE,0x5E,0x0B,0xDB,
        0xE0,0x32,0x3A,0x0A,0x49,0x06,0x24,0x5C,0xC2,0xD3,0xAC,0x62,0x91,0x95,0xE4,0x79,
        0xE7,0xC8,0x37,0x6D,0x8D,0xD5,0x4E,0xA9,0x6C,0x56,0xF4,0xEA,0x65,0x7A,0xAE,0x08,
        0xBA,0x78,0x25,0x2E,0x1C,0xA6,0xB4,0xC6,0xE8,0xDD,0x74,0x1F,0x4B,0xBD,0x8B,0x8A,
        0x70,0x3E,0xB5,0x66,0x48,0x03,0xF6,0x0E,0x61,0x35,0x57,0xB9,0x86,0xC1,0x1D,0x9E,
        0xE1,0xF8,0x98,0x11,0x69,0xD9,0x8E,0x94,0x9B,0x1E,0x87,0xE9,0xCE,0x55,0x28,0xDF,
        0x8C,0xA1,0x89,0x0D,0xBF,0xE6,0x42,0x68,0x41,0x99,0x2D,0x0F,0xB0,0x54,0xBB,0x16
    }
    
    local si = {
    [0]=0x52,0x09,0x6A,0xD5,0x30,0x36,0xA5,0x38,0xBF,0x40,0xA3,0x9E,0x81,0xF3,0xD7,0xFB,
        0x7C,0xE3,0x39,0x82,0x9B,0x2F,0xFF,0x87,0x34,0x8E,0x43,0x44,0xC4,0xDE,0xE9,0xCB,
        0x54,0x7B,0x94,0x32,0xA6,0xC2,0x23,0x3D,0xEE,0x4C,0x95,0x0B,0x42,0xFA,0xC3,0x4E,
        0x08,0x2E,0xA1,0x66,0x28,0xD9,0x24,0xB2,0x76,0x5B,0xA2,0x49,0x6D,0x8B,0xD1,0x25,
        0x72,0xF8,0xF6,0x64,0x86,0x68,0x98,0x16,0xD4,0xA4,0x5C,0xCC,0x5D,0x65,0xB6,0x92,
        0x6C,0x70,0x48,0x50,0xFD,0xED,0xB9,0xDA,0x5E,0x15,0x46,0x57,0xA7,0x8D,0x9D,0x84,
        0x90,0xD8,0xAB,0x00,0x8C,0xBC,0xD3,0x0A,0xF7,0xE4,0x58,0x05,0xB8,0xB3,0x45,0x06,
        0xD0,0x2C,0x1E,0x8F,0xCA,0x3F,0x0F,0x02,0xC1,0xAF,0xBD,0x03,0x01,0x13,0x8A,0x6B,
        0x3A,0x91,0x11,0x41,0x4F,0x67,0xDC,0xEA,0x97,0xF2,0xCF,0xCE,0xF0,0xB4,0xE6,0x73,
        0x96,0xAC,0x74,0x22,0xE7,0xAD,0x35,0x85,0xE2,0xF9,0x37,0xE8,0x1C,0x75,0xDF,0x6E,
        0x47,0xF1,0x1A,0x71,0x1D,0x29,0xC5,0x89,0x6F,0xB7,0x62,0x0E,0xAA,0x18,0xBE,0x1B,
        0xFC,0x56,0x3E,0x4B,0xC6,0xD2,0x79,0x20,0x9A,0xDB,0xC0,0xFE,0x78,0xCD,0x5A,0xF4,
        0x1F,0xDD,0xA8,0x33,0x88,0x07,0xC7,0x31,0xB1,0x12,0x10,0x59,0x27,0x80,0xEC,0x5F,
        0x60,0x51,0x7F,0xA9,0x19,0xB5,0x4A,0x0D,0x2D,0xE5,0x7A,0x9F,0x93,0xC9,0x9C,0xEF,
        0xA0,0xE0,0x3B,0x4D,0xAE,0x2A,0xF5,0xB0,0xC8,0xEB,0xBB,0x3C,0x83,0x53,0x99,0x61,
        0x17,0x2B,0x04,0x7E,0xBA,0x77,0xD6,0x26,0xE1,0x69,0x14,0x63,0x55,0x21,0x0C,0x7D
    }
    
    local rcon = {
        0x8d,0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80,0x1b,0x36,0x6c,0xd8,0xab,0x4d,0x9a,
        0x2f,0x5e,0xbc,0x63,0xc6,0x97,0x35,0x6a,0xd4,0xb3,0x7d,0xfa,0xef,0xc5,0x91,0x39,
        0x72,0xe4,0xd3,0xbd,0x61,0xc2,0x9f,0x25,0x4a,0x94,0x33,0x66,0xcc,0x83,0x1d,0x3a,
        0x74,0xe8,0xcb,0x8d,0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80,0x1b,0x36,0x6c,0xd8,
        0xab,0x4d,0x9a,0x2f,0x5e,0xbc,0x63,0xc6,0x97,0x35,0x6a,0xd4,0xb3,0x7d,0xfa,0xef,
        0xc5,0x91,0x39,0x72,0xe4,0xd3,0xbd,0x61,0xc2,0x9f,0x25,0x4a,0x94,0x33,0x66,0xcc,
        0x83,0x1d,0x3a,0x74,0xe8,0xcb,0x8d,0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80,0x1b,
        0x36,0x6c,0xd8,0xab,0x4d,0x9a,0x2f,0x5e,0xbc,0x63,0xc6,0x97,0x35,0x6a,0xd4,0xb3,
        0x7d,0xfa,0xef,0xc5,0x91,0x39,0x72,0xe4,0xd3,0xbd,0x61,0xc2,0x9f,0x25,0x4a,0x94,
        0x33,0x66,0xcc,0x83,0x1d,0x3a,0x74,0xe8,0xcb,0x8d,0x01,0x02,0x04,0x08,0x10,0x20,
        0x40,0x80,0x1b,0x36,0x6c,0xd8,0xab,0x4d,0x9a,0x2f,0x5e,0xbc,0x63,0xc6,0x97,0x35,
        0x6a,0xd4,0xb3,0x7d,0xfa,0xef,0xc5,0x91,0x39,0x72,0xe4,0xd3,0xbd,0x61,0xc2,0x9f,
        0x25,0x4a,0x94,0x33,0x66,0xcc,0x83,0x1d,0x3a,0x74,0xe8,0xcb,0x8d,0x01,0x02,0x04,
        0x08,0x10,0x20,0x40,0x80,0x1b,0x36,0x6c,0xd8,0xab,0x4d,0x9a,0x2f,0x5e,0xbc,0x63,
        0xc6,0x97,0x35,0x6a,0xd4,0xb3,0x7d,0xfa,0xef,0xc5,0x91,0x39,0x72,0xe4,0xd3,0xbd,
        0x61,0xc2,0x9f,0x25,0x4a,0x94,0x33,0x66,0xcc,0x83,0x1d,0x3a,0x74,0xe8,0xcb,0x8d
    }
    
    local xor4 = {
    [0]=0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,
        1,0,3,2,5,4,7,6,9,8,11,10,13,12,15,14,
        2,3,0,1,6,7,4,5,10,11,8,9,14,15,12,13,
        3,2,1,0,7,6,5,4,11,10,9,8,15,14,13,12,
        4,5,6,7,0,1,2,3,12,13,14,15,8,9,10,11,
        5,4,7,6,1,0,3,2,13,12,15,14,9,8,11,10,
        6,7,4,5,2,3,0,1,14,15,12,13,10,11,8,9,
        7,6,5,4,3,2,1,0,15,14,13,12,11,10,9,8,
        8,9,10,11,12,13,14,15,0,1,2,3,4,5,6,7,
        9,8,11,10,13,12,15,14,1,0,3,2,5,4,7,6,
        10,11,8,9,14,15,12,13,2,3,0,1,6,7,4,5,
        11,10,9,8,15,14,13,12,3,2,1,0,7,6,5,4,
        12,13,14,15,8,9,10,11,4,5,6,7,0,1,2,3,
        13,12,15,14,9,8,11,10,5,4,7,6,1,0,3,2,
        14,15,12,13,10,11,8,9,6,7,4,5,2,3,0,1,
        15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0,
    }
    
    local function xor8(a, b)
        local al = a % 16
        local bl = b % 16
        return 16 * xor4[a - al + (b - bl) / 16] + xor4[16 * al + bl]
    end
    
    local function addRoundKey(state, key)
        for i, byte in next, state do
            state[i] = xor8(byte, key[i])
        end
    end
    
    local function subBytes(state, s_box)
        for i, byte in next, state do
            state[i] = s_box[byte]
        end
    end
    
    local function shiftRows(state)
        state[2], state[6], state[10], state[14] =
        state[6], state[10], state[14], state[2]
    
        state[3], state[7], state[11], state[15] =
        state[11], state[15], state[3], state[7]
    
        state[4], state[8], state[12], state[16] =
        state[16], state[4], state[8], state[12]
    end
    
    local function inv_shiftRows(state)
        state[6], state[10], state[14], state[2] =
        state[2], state[6], state[10], state[14]
    
        state[11], state[15], state[3], state[7] =
        state[3], state[7], state[11], state[15]
    
        state[16], state[4], state[8], state[12] =
        state[4], state[8], state[12], state[16]
    end
    
    local function mixColumns(state)
        for i = 0, 3 do
            local cur = i*4+1
            local a, b, c, d = state[cur], state[cur + 1], state[cur + 2], state[cur + 3]
            state[cur + 0] = xor8(xor8(xor8(GF8x2[a], GF8x3[b]), c), d)
            state[cur + 1] = xor8(xor8(xor8(a, GF8x2[b]), GF8x3[c]), d)
            state[cur + 2] = xor8(xor8(xor8(a, b), GF8x2[c]), GF8x3[d])
            state[cur + 3] = xor8(xor8(xor8(GF8x3[a], b), c), GF8x2[d])
        end
    end
    
    local function inv_mixColumns(state) -- TODO: fix
        for i = 0, 3 do
            local cur = i*4+1
            local a, b, c, d = state[cur], state[cur + 1], state[cur + 2], state[cur + 3]
            state[cur + 0] = xor8(xor8(xor8(GF8x14[a], GF8x11[b]), GF8x13[c]), GF8x9[d])
            state[cur + 1] = xor8(xor8(xor8(GF8x9[a], GF8x14[b]), GF8x11[c]), GF8x13[d])
            state[cur + 2] = xor8(xor8(xor8(GF8x13[a], GF8x9[b]), GF8x14[c]), GF8x11[d])
            state[cur + 3] = xor8(xor8(xor8(GF8x11[a], GF8x13[b]), GF8x9[c]), GF8x14[d])
        end
    end
    
    -- 256-bit key constants
    local n = 32 -- number of bytes in the 256-bit encryption key
    local b = 240 -- number of bytes in 15 128-bit round keys
    local function schedule256(key)
        local expanded = {}
        for c = 0, n-1 do
            expanded[c] = key[c]
        end

        local i = 1
        local c = n
        local t1, t2, t3, t4 --t
        while c < b do

            t1 = expanded[c-4]
            t2 = expanded[c-3]
            t3 = expanded[c-2]
            t4 = expanded[c-1]

            if (c % n == 0) then
                t1, t2, t3, t4 = xor8(rcon[i+1], s[t2]), s[t3], s[t4], s[t1]
                i = i + 1
            end

            if (c % n == 16) then
                t1 = s[t1]
                t2 = s[t2]
                t3 = s[t3]
                t4 = s[t4]
            end
            
            t1 = xor8(t1, expanded[c - n])
            expanded[c] = t1
            c = c + 1

            t2 = xor8(t2, expanded[c - n])
            expanded[c] = t2
            c = c + 1

            t3 = xor8(t3, expanded[c - n])
            expanded[c] = t3
            c = c + 1

            t4 = xor8(t4, expanded[c - n])
            expanded[c] = t4
            c = c + 1
        end
    
        local roundKeys = {}
        for round = 0, 14 do
            local roundKey = {}
            for byte = 0, 15 do
                roundKey[byte+1] = expanded[round * 16 + byte]
            end
            roundKeys[round] = roundKey
        end
        return roundKeys
    end
    
    local function chunks(text, i)
        local first = i * 16 + 1
        if first > #text then
            return
        end
        i = i + 1
    
        local chunk = {text:byte(first, first + 15)}
        for j = #chunk + 1, 16 do
            chunk[j] = 0
        end
    
        return i, chunk
    end
    
    local function encrypt(state, roundKeys)
        addRoundKey(state, roundKeys[0])
        for round = 1, 13 do
            subBytes(state, s)
            shiftRows(state)
            mixColumns(state)
            addRoundKey(state, roundKeys[round])
        end
        subBytes(state, s)
        shiftRows(state)
        addRoundKey(state, roundKeys[14])
    end
    
    local function decrypt(state, roundKeys)
        addRoundKey(state, roundKeys[14])
        inv_shiftRows(state)
        subBytes(state, si)
        for round = 13, 1, -1 do
            addRoundKey(state, roundKeys[round])
            inv_mixColumns(state)
            inv_shiftRows(state)
            subBytes(state, si)
        end
        addRoundKey(state, roundKeys[0])
    end
    
    local unpack = unpack or table.unpack

    local function ECB_256(method, key, originaltext)
        local text = {}
        local roundKeys = schedule256(key)
        for chunk, state in chunks, originaltext, 0 do
            method(state, roundKeys)
            text[chunk] = string.char(unpack(state))
        end
        return table.concat(text)
    end

    _G.AES = {
        encrypt = encrypt;
        decrypt = decrypt;
        ECB_256 = ECB_256;
    }
end

--#endregion


local function table_to_zero_indexed(tbl)
    for i = 1, #tbl do
        tbl[i-1] = tbl[i]
    end
    tbl[#tbl] = nil
    return tbl
end

local function print_hex_table(tbl)
    local str_tbl = {}
    for i = 0, #tbl do
        str_tbl[#str_tbl + 1] = string.format("%02x", tbl[i])
        if 0 < i and i % 8 == 0 then
            str_tbl[#str_tbl + 1] = " "
        end
    end
    print(table.concat(str_tbl, ""))
end

local sk, pk, esk, epk
if false then
    sk, pk = X25519.generate_keypair()
    esk, epk = X25519.generate_keypair()
elseif true then
    sk = table_to_zero_indexed({0x38,0xb5,0x62,0x0d,0x2d,0x93,0x1a,0xe3,0x63,0x64,0xc6,0x33,0xf0,0x11,0x31,0x1f,0xc2,0x13,0x46,0x88,0x54,0xa7,0x9e,0x25,0x31,0xdf,0xc4,0x28,0x62,0x41,0x07,0x6d})
    pk = table_to_zero_indexed({0xa3,0x05,0xe5,0x8f,0xa7,0x4d,0xc5,0x7e,0xa8,0x32,0xc8,0x1a,0x69,0x79,0xbe,0xf5,0xa8,0x97,0x64,0x06,0xa4,0x9e,0xb9,0x43,0xfb,0x97,0x95,0x33,0x5d,0x1f,0xf8,0x44})
    esk = table_to_zero_indexed({0x98,0xb2,0x88,0x88,0xf8,0x3d,0xcf,0xc9,0x7b,0x9f,0xea,0x36,0x2a,0x3d,0x71,0x0c,0x08,0x73,0xc5,0xe2,0xb7,0x9e,0xb9,0xa7,0xd3,0xaf,0xb4,0xcc,0x40,0x2d,0x6a,0x54})
    epk = table_to_zero_indexed({0x35,0x66,0x97,0xed,0x50,0x90,0x59,0xc6,0x18,0xad,0xec,0x42,0xc2,0x3d,0x8b,0xd4,0x0e,0x70,0xb4,0x43,0x14,0x63,0x77,0xe2,0xb0,0x62,0xfa,0xe7,0x0f,0xc5,0x4a,0x34})
else
    sk = table_to_zero_indexed({0xf1,0xd2,0xae,0xa0,0xf9,0x52,0x50,0x58,0x1e,0x15,0x42,0x82,0x42,0x83,0x02,0x1a,0x3c,0x47,0x54,0x30,0x11,0x92,0x69,0x36,0x89,0x3a,0xdd,0x25,0xf9,0x3c,0xa9,0x58})
    pk = table_to_zero_indexed({0x19,0x68,0x35,0xd8,0x9e,0xc2,0x29,0xf0,0xd8,0x1b,0x66,0x91,0xa5,0x2c,0x37,0x5a,0xeb,0xd3,0xce,0xd6,0x73,0x97,0x64,0xbe,0xfe,0x6a,0x80,0xed,0xa1,0x85,0xaa,0x20})
    esk = table_to_zero_indexed({0x30,0x0b,0xa6,0x9a,0xa8,0x3f,0xd2,0x3d,0xeb,0x8e,0xa7,0x61,0xeb,0x7d,0x0e,0xbf,0x64,0x03,0x41,0x84,0xbb,0x0f,0xe9,0x56,0x6c,0x0d,0xed,0xfe,0xd0,0xf6,0x05,0x34})
    epk = table_to_zero_indexed({0x03,0xdd,0x5f,0x8f,0x34,0x94,0x1a,0x90,0x30,0x2b,0x94,0x3c,0x5d,0xeb,0x1e,0x75,0xfe,0xbe,0xef,0xfd,0xe1,0x70,0x93,0x79,0x32,0xa7,0x56,0xeb,0x4c,0x2c,0xc5,0x28})
    -- 3410e8c90f834a02ca 2e436e676e16bbf3 b92c3d5af5b9551e ffbbf06c2e2277
end

print("----")
print_hex_table(sk)
print_hex_table(pk)
print_hex_table(esk)
print_hex_table(epk)
print("----")
print_hex_table(X25519.get_shared_key(sk, epk))
print("----")
local shared_secret = X25519.get_shared_key(esk, pk)
print_hex_table(shared_secret)
print("----")


local key = table_to_zero_indexed({0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1a,0x1b,0x1c,0x1d,0x1e,0x1f})
--key = 0x0
local plaintext = Base64.decode('ABEiM0RVZneImaq7zN3u/w==') -- 00112233445566778899aabbccddeeff
local cyphertext = AES.ECB_256(AES.encrypt, key, plaintext)
local b64_cyphertext = Base64.encode(cyphertext)
local cyphertext2 = Base64.decode(b64_cyphertext)
local plaintext2 = AES.ECB_256(AES.decrypt, key, cyphertext2)


print("plaintext:", #plaintext, plaintext)
print("cyphertext:", #cyphertext, b64_cyphertext)
print("plaintext:", #plaintext2, plaintext2)

--[[


keep sk, send pk + esk to receiver, discard epk
use the 32 bytes shared key as aes key to encrypt/decrypt
--------------

from cryptography.hazmat.primitives.asymmetric.x25519 import X25519PrivateKey

def print_as_lua_table(lst):
    print("{"+",".join(["0x%02x" % b for b in lst])+"}")
    
def print_hex(lst):
    print(",".join(["%02x" % b for b in lst]))

def generate_keypair():
    sk = X25519PrivateKey.generate()
    pk = sk.public_key()
    return sk, pk

sk, pk = generate_keypair()
esk, epk = generate_keypair()
print_as_lua_table(sk.private_bytes_raw())
print_as_lua_table(pk.public_bytes_raw())
print_as_lua_table(esk.private_bytes_raw())
print_as_lua_table(epk.public_bytes_raw())

shared_key = sk.exchange(epk)
print_hex(shared_key)
]]--